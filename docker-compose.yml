networks:
  tfm-net:
    driver: bridge

volumes:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  mongo_data:

services:
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - tfm-net

  kafka1:
    image: bitnami/kafka:3.5
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka1_data:/bitnami/kafka
    depends_on:
      - zookeeper
    networks:
      - tfm-net

  kafka2:
    image: bitnami/kafka:3.5
    container_name: kafka2
    ports:
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka2:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka2_data:/bitnami/kafka
    depends_on:
      - zookeeper
    networks:
      - tfm-net

  kafka3:
    image: bitnami/kafka:3.5
    container_name: kafka3
    ports:
      - "9094:9094"
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9094
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka3:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka3_data:/bitnami/kafka
    depends_on:
      - zookeeper
    networks:
      - tfm-net

  mongo:
    image: mongo:6.0
    container_name: final-mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - tfm-net

  init-topics:
    image: bitnami/kafka:3.5
    container_name: init-topics
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - tfm-net
    volumes:
      - ./init-topics.sh:/init-topics.sh
    entrypoint: [ "bash", "/init-topics.sh" ]

  api:
    build:
      context: .
      dockerfile: app/api/Dockerfile
    container_name: final-api
    ports:
      - "8000:8000"
    depends_on:
      - kafka1
      - mongo
    networks:
      - tfm-net

  riot_fetcher:
    build:
      context: .
      dockerfile: app/riot_fetcher/Dockerfile
    container_name: final-riot-fetcher
    depends_on:
      - kafka1
      - mongo
    networks:
      - tfm-net

  ingestion:
    build:
      context: .
      dockerfile: app/ingestion/Dockerfile
    container_name: final-ingestion
    depends_on:
      - kafka1
      - mongo
    networks:
      - tfm-net

  dashboard:
    build:
      context: .
      dockerfile: app/dashboard/Dockerfile
    container_name: final-dashboard
    ports:
      - "8501:8501"
    depends_on:
      - mongo
    networks:
      - tfm-net

  producer-mock:
    build:
      context: .
      dockerfile: app/ingestion/Dockerfile
    container_name: final-producer-mock
    command: python src/ingestion/producer_mock.py
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - tfm-net