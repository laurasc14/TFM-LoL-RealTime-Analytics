version: "3.8"

services:
  # --- Infra básica ------------------------------------------------
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      # Dos listeners: interno (PLAINTEXT) y externo (HOST)
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:9092
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes
    depends_on:
      - zookeeper

  # --- Kafka Connect ----------------------------------------------
  connect:
    image: confluentinc/cp-kafka-connect:7.6.1
    container_name: connect
    depends_on:
      - kafka
    ports:
      - "8083:8083"          # REST API del conector
    environment:
      - CONNECT_BOOTSTRAP_SERVERS=kafka:9092
      - CONNECT_GROUP_ID=connect
      - CONNECT_REST_ADVERTISED_HOST_NAME=connect
      - CONNECT_PLUGIN_PATH=/usr/share/java,/plugins
      - CONNECT_OFFSET_STORAGE_TOPIC=connect-offsets
      - CONNECT_CONFIG_STORAGE_TOPIC=connect-configs
      - CONNECT_STATUS_STORAGE_TOPIC=connect-status
    volumes:
      - ./connect/file-source.properties:/tmp/file-source.properties
      - ./data/incoming:/data/incoming
    command: >
      bash -c "\
        /etc/confluent/docker/run &\
        sleep 25 && \
        curl -X POST -H 'Content-Type: application/json' \
             --data @/tmp/file-source.properties \
             http://localhost:8083/connectors"

  # --- Servicio de ingesta manual ---------------------------------
  ingestion:
    image: python:3.11-slim
    container_name: ingestion
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
    volumes:
      - ./src/ingestion:/app/ingestion
      - ./data/historial:/app/data/historial
    working_dir: /app/ingestion
    command: ["sleep", "infinity"]  # luego haces docker compose exec
    depends_on:
      - kafka

  # --- API FastAPI -------------------------------------------------
  api:
    build: ./api                           # tu Dockerfile ahí
    container_name: api
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
      - REDIS_HOST=redis
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - redis

  # --- Redis para estado de partida --------------------------------
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"

  # --- Dashboard Streamlit ----------------------------------------
  dashboard:
    build: ./dashboard                    # Dockerfile con streamlit
    container_name: dashboard
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://api:8000
    depends_on:
      - api